@page "/"
@inject HttpClient http
@inject IJSRuntime js

<h3 class="productTTL">პროდუქტები</h3>
<div>
    <a class="btn add-btn" style="color:white" href="products/createproduct"><span>✚</span> პროდუქტის დამატება </a>
</div>
<br />


@if (products == null)
{

    <p><em>იტვირთება...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr class="tr__title">
                <th>პროდუქტის ID</th>
                <th>დასახელება</th>
                <th>ფასი</th>
                <th>ქვეყანა</th>
                <th>დაწყების თარიღი</th>
                <th>დასრულების თარიღი</th>
                <th>რედაქტირება</th>
            </tr>
            @foreach (var product in products)
            {
            <tr>
                <td>@product.ID</td>
                <td>@product.Description</td>
                <td>@product.Price</td>
                <td>@product.Country</td>
                <td>@product.StartDate</td>
                <td>@product.EndDate</td>
                <td  class="editBox">
                        <a class="editBtn" href="products/updateproduct/@product.ID">✎</a>
                        <button class="delete" @onclick="@(()=>Delete(product.ID))">X</button>
                    </td>
            </tr>
            }
        </thead>
        <tbody>
            
        </tbody>
    </table>


}




@code {
    Product[] products { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    async Task LoadProducts()
    {
        products = await http.GetFromJsonAsync<Product[]>("api/product");
        //products = new Product[]
        //{
        //    new Product(){ID =1, Description="მსხალი"  },
        //    new Product(){ID =2, Description="ატამი"  },
        //    new Product(){ID =3, Description="ვაშლი"  }
        //};

    }
    async Task Delete(int productID)
    {
        if (await js.InvokeAsync<bool>("confirm", "Are you sure,you want to delete?"))
        {
            await http.DeleteAsync($"api/product/{productID}");
            await LoadProducts();
        }
    }
}
